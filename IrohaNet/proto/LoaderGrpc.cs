// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loader.proto
// Original file comments:
//
// Copyright Soramitsu Co., Ltd. 2017 All Rights Reserved.
// http://soramitsu.co.jp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Iroha.Network.Proto {
  public static partial class Loader
  {
    static readonly string __ServiceName = "iroha.network.proto.Loader";

    static readonly grpc::Marshaller<global::Iroha.Network.Proto.BlocksRequest> __Marshaller_BlocksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Iroha.Network.Proto.BlocksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Iroha.Protocol.Block> __Marshaller_Block = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Iroha.Protocol.Block.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Iroha.Network.Proto.BlockRequest> __Marshaller_BlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Iroha.Network.Proto.BlockRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Iroha.Network.Proto.BlocksRequest, global::Iroha.Protocol.Block> __Method_retrieveBlocks = new grpc::Method<global::Iroha.Network.Proto.BlocksRequest, global::Iroha.Protocol.Block>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "retrieveBlocks",
        __Marshaller_BlocksRequest,
        __Marshaller_Block);

    static readonly grpc::Method<global::Iroha.Network.Proto.BlockRequest, global::Iroha.Protocol.Block> __Method_retrieveBlock = new grpc::Method<global::Iroha.Network.Proto.BlockRequest, global::Iroha.Protocol.Block>(
        grpc::MethodType.Unary,
        __ServiceName,
        "retrieveBlock",
        __Marshaller_BlockRequest,
        __Marshaller_Block);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Iroha.Network.Proto.LoaderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Loader</summary>
    public abstract partial class LoaderBase
    {
      public virtual global::System.Threading.Tasks.Task retrieveBlocks(global::Iroha.Network.Proto.BlocksRequest request, grpc::IServerStreamWriter<global::Iroha.Protocol.Block> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Iroha.Protocol.Block> retrieveBlock(global::Iroha.Network.Proto.BlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Loader</summary>
    public partial class LoaderClient : grpc::ClientBase<LoaderClient>
    {
      /// <summary>Creates a new client for Loader</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoaderClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Loader that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoaderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoaderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoaderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Iroha.Protocol.Block> retrieveBlocks(global::Iroha.Network.Proto.BlocksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return retrieveBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Iroha.Protocol.Block> retrieveBlocks(global::Iroha.Network.Proto.BlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_retrieveBlocks, null, options, request);
      }
      public virtual global::Iroha.Protocol.Block retrieveBlock(global::Iroha.Network.Proto.BlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return retrieveBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Iroha.Protocol.Block retrieveBlock(global::Iroha.Network.Proto.BlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_retrieveBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Iroha.Protocol.Block> retrieveBlockAsync(global::Iroha.Network.Proto.BlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return retrieveBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Iroha.Protocol.Block> retrieveBlockAsync(global::Iroha.Network.Proto.BlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_retrieveBlock, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LoaderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoaderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LoaderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_retrieveBlocks, serviceImpl.retrieveBlocks)
          .AddMethod(__Method_retrieveBlock, serviceImpl.retrieveBlock).Build();
    }

  }
}
#endregion
