// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iroha.Protocol {

  /// <summary>Holder for reflection information generated from block.proto</summary>
  public static partial class BlockReflection {

    #region Descriptor
    /// <summary>File descriptor for block.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtibG9jay5wcm90bxIOaXJvaGEucHJvdG9jb2waDmNvbW1hbmRzLnByb3Rv",
            "Gg9wcmltaXRpdmUucHJvdG8iTQoGSGVhZGVyEhQKDGNyZWF0ZWRfdGltZRgB",
            "IAEoBBItCgpzaWduYXR1cmVzGAIgAygLMhkuaXJvaGEucHJvdG9jb2wuU2ln",
            "bmF0dXJlIu0BCgtUcmFuc2FjdGlvbhI0CgdwYXlsb2FkGAEgASgLMiMuaXJv",
            "aGEucHJvdG9jb2wuVHJhbnNhY3Rpb24uUGF5bG9hZBIsCglzaWduYXR1cmUY",
            "AiADKAsyGS5pcm9oYS5wcm90b2NvbC5TaWduYXR1cmUaegoHUGF5bG9hZBIp",
            "Cghjb21tYW5kcxgBIAMoCzIXLmlyb2hhLnByb3RvY29sLkNvbW1hbmQSGgoS",
            "Y3JlYXRvcl9hY2NvdW50X2lkGAIgASgJEhIKCnR4X2NvdW50ZXIYAyABKAQS",
            "FAoMY3JlYXRlZF90aW1lGAQgASgEIvcBCgVCbG9jaxIuCgdwYXlsb2FkGAEg",
            "ASgLMh0uaXJvaGEucHJvdG9jb2wuQmxvY2suUGF5bG9hZBItCgpzaWduYXR1",
            "cmVzGAIgAygLMhkuaXJvaGEucHJvdG9jb2wuU2lnbmF0dXJlGo4BCgdQYXls",
            "b2FkEjEKDHRyYW5zYWN0aW9ucxgBIAMoCzIbLmlyb2hhLnByb3RvY29sLlRy",
            "YW5zYWN0aW9uEhEKCXR4X251bWJlchgCIAEoDRIOCgZoZWlnaHQYAyABKAQS",
            "FwoPcHJldl9ibG9ja19oYXNoGAUgASgMEhQKDGNyZWF0ZWRfdGltZRgGIAEo",
            "BGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Iroha.Protocol.CommandsReflection.Descriptor, global::Iroha.Protocol.PrimitiveReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Header), global::Iroha.Protocol.Header.Parser, new[]{ "CreatedTime", "Signatures" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Transaction), global::Iroha.Protocol.Transaction.Parser, new[]{ "Payload", "Signature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Transaction.Types.Payload), global::Iroha.Protocol.Transaction.Types.Payload.Parser, new[]{ "Commands", "CreatorAccountId", "TxCounter", "CreatedTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Block), global::Iroha.Protocol.Block.Parser, new[]{ "Payload", "Signatures" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Block.Types.Payload), global::Iroha.Protocol.Block.Types.Payload.Parser, new[]{ "Transactions", "TxNumber", "Height", "PrevBlockHash", "CreatedTime" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.BlockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      createdTime_ = other.createdTime_;
      signatures_ = other.signatures_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "created_time" field.</summary>
    public const int CreatedTimeFieldNumber = 1;
    private ulong createdTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreatedTime {
      get { return createdTime_; }
      set {
        createdTime_ = value;
      }
    }

    /// <summary>Field number for the "signatures" field.</summary>
    public const int SignaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Iroha.Protocol.Signature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(18, global::Iroha.Protocol.Signature.Parser);
    private readonly pbc::RepeatedField<global::Iroha.Protocol.Signature> signatures_ = new pbc::RepeatedField<global::Iroha.Protocol.Signature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iroha.Protocol.Signature> Signatures {
      get { return signatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreatedTime != other.CreatedTime) return false;
      if(!signatures_.Equals(other.signatures_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreatedTime != 0UL) hash ^= CreatedTime.GetHashCode();
      hash ^= signatures_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreatedTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CreatedTime);
      }
      signatures_.WriteTo(output, _repeated_signatures_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreatedTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatedTime);
      }
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.CreatedTime != 0UL) {
        CreatedTime = other.CreatedTime;
      }
      signatures_.Add(other.signatures_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CreatedTime = input.ReadUInt64();
            break;
          }
          case 18: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.BlockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      signature_ = other.signature_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Iroha.Protocol.Transaction.Types.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Transaction.Types.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Iroha.Protocol.Signature> _repeated_signature_codec
        = pb::FieldCodec.ForMessage(18, global::Iroha.Protocol.Signature.Parser);
    private readonly pbc::RepeatedField<global::Iroha.Protocol.Signature> signature_ = new pbc::RepeatedField<global::Iroha.Protocol.Signature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iroha.Protocol.Signature> Signature {
      get { return signature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if(!signature_.Equals(other.signature_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      hash ^= signature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      signature_.WriteTo(output, _repeated_signature_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      size += signature_.CalculateSize(_repeated_signature_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Iroha.Protocol.Transaction.Types.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
      signature_.Add(other.signature_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Iroha.Protocol.Transaction.Types.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 18: {
            signature_.AddEntriesFrom(input, _repeated_signature_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Payload : pb::IMessage<Payload> {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Iroha.Protocol.Transaction.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload(Payload other) : this() {
          commands_ = other.commands_.Clone();
          creatorAccountId_ = other.creatorAccountId_;
          txCounter_ = other.txCounter_;
          createdTime_ = other.createdTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload Clone() {
          return new Payload(this);
        }

        /// <summary>Field number for the "commands" field.</summary>
        public const int CommandsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Iroha.Protocol.Command> _repeated_commands_codec
            = pb::FieldCodec.ForMessage(10, global::Iroha.Protocol.Command.Parser);
        private readonly pbc::RepeatedField<global::Iroha.Protocol.Command> commands_ = new pbc::RepeatedField<global::Iroha.Protocol.Command>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Iroha.Protocol.Command> Commands {
          get { return commands_; }
        }

        /// <summary>Field number for the "creator_account_id" field.</summary>
        public const int CreatorAccountIdFieldNumber = 2;
        private string creatorAccountId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CreatorAccountId {
          get { return creatorAccountId_; }
          set {
            creatorAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "tx_counter" field.</summary>
        public const int TxCounterFieldNumber = 3;
        private ulong txCounter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TxCounter {
          get { return txCounter_; }
          set {
            txCounter_ = value;
          }
        }

        /// <summary>Field number for the "created_time" field.</summary>
        public const int CreatedTimeFieldNumber = 4;
        private ulong createdTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CreatedTime {
          get { return createdTime_; }
          set {
            createdTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!commands_.Equals(other.commands_)) return false;
          if (CreatorAccountId != other.CreatorAccountId) return false;
          if (TxCounter != other.TxCounter) return false;
          if (CreatedTime != other.CreatedTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= commands_.GetHashCode();
          if (CreatorAccountId.Length != 0) hash ^= CreatorAccountId.GetHashCode();
          if (TxCounter != 0UL) hash ^= TxCounter.GetHashCode();
          if (CreatedTime != 0UL) hash ^= CreatedTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          commands_.WriteTo(output, _repeated_commands_codec);
          if (CreatorAccountId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CreatorAccountId);
          }
          if (TxCounter != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TxCounter);
          }
          if (CreatedTime != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(CreatedTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += commands_.CalculateSize(_repeated_commands_codec);
          if (CreatorAccountId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatorAccountId);
          }
          if (TxCounter != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxCounter);
          }
          if (CreatedTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatedTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payload other) {
          if (other == null) {
            return;
          }
          commands_.Add(other.commands_);
          if (other.CreatorAccountId.Length != 0) {
            CreatorAccountId = other.CreatorAccountId;
          }
          if (other.TxCounter != 0UL) {
            TxCounter = other.TxCounter;
          }
          if (other.CreatedTime != 0UL) {
            CreatedTime = other.CreatedTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                commands_.AddEntriesFrom(input, _repeated_commands_codec);
                break;
              }
              case 18: {
                CreatorAccountId = input.ReadString();
                break;
              }
              case 24: {
                TxCounter = input.ReadUInt64();
                break;
              }
              case 32: {
                CreatedTime = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.BlockReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      signatures_ = other.signatures_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Iroha.Protocol.Block.Types.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Block.Types.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "signatures" field.</summary>
    public const int SignaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Iroha.Protocol.Signature> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(18, global::Iroha.Protocol.Signature.Parser);
    private readonly pbc::RepeatedField<global::Iroha.Protocol.Signature> signatures_ = new pbc::RepeatedField<global::Iroha.Protocol.Signature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iroha.Protocol.Signature> Signatures {
      get { return signatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if(!signatures_.Equals(other.signatures_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      hash ^= signatures_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      signatures_.WriteTo(output, _repeated_signatures_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Iroha.Protocol.Block.Types.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
      signatures_.Add(other.signatures_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Iroha.Protocol.Block.Types.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 18: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Block message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// everything that should be signed:
      /// </summary>
      public sealed partial class Payload : pb::IMessage<Payload> {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Iroha.Protocol.Block.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload(Payload other) : this() {
          transactions_ = other.transactions_.Clone();
          txNumber_ = other.txNumber_;
          height_ = other.height_;
          prevBlockHash_ = other.prevBlockHash_;
          createdTime_ = other.createdTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload Clone() {
          return new Payload(this);
        }

        /// <summary>Field number for the "transactions" field.</summary>
        public const int TransactionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Iroha.Protocol.Transaction> _repeated_transactions_codec
            = pb::FieldCodec.ForMessage(10, global::Iroha.Protocol.Transaction.Parser);
        private readonly pbc::RepeatedField<global::Iroha.Protocol.Transaction> transactions_ = new pbc::RepeatedField<global::Iroha.Protocol.Transaction>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Iroha.Protocol.Transaction> Transactions {
          get { return transactions_; }
        }

        /// <summary>Field number for the "tx_number" field.</summary>
        public const int TxNumberFieldNumber = 2;
        private uint txNumber_;
        /// <summary>
        /// the number of transactions inside. Maximum 16384 or 2^14
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TxNumber {
          get { return txNumber_; }
          set {
            txNumber_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 3;
        private ulong height_;
        /// <summary>
        /// the current block number in a ledger
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        /// <summary>Field number for the "prev_block_hash" field.</summary>
        public const int PrevBlockHashFieldNumber = 5;
        private pb::ByteString prevBlockHash_ = pb::ByteString.Empty;
        /// <summary>
        /// Previous block hash
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PrevBlockHash {
          get { return prevBlockHash_; }
          set {
            prevBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "created_time" field.</summary>
        public const int CreatedTimeFieldNumber = 6;
        private ulong createdTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CreatedTime {
          get { return createdTime_; }
          set {
            createdTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!transactions_.Equals(other.transactions_)) return false;
          if (TxNumber != other.TxNumber) return false;
          if (Height != other.Height) return false;
          if (PrevBlockHash != other.PrevBlockHash) return false;
          if (CreatedTime != other.CreatedTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= transactions_.GetHashCode();
          if (TxNumber != 0) hash ^= TxNumber.GetHashCode();
          if (Height != 0UL) hash ^= Height.GetHashCode();
          if (PrevBlockHash.Length != 0) hash ^= PrevBlockHash.GetHashCode();
          if (CreatedTime != 0UL) hash ^= CreatedTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          transactions_.WriteTo(output, _repeated_transactions_codec);
          if (TxNumber != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(TxNumber);
          }
          if (Height != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Height);
          }
          if (PrevBlockHash.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(PrevBlockHash);
          }
          if (CreatedTime != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(CreatedTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += transactions_.CalculateSize(_repeated_transactions_codec);
          if (TxNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxNumber);
          }
          if (Height != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
          }
          if (PrevBlockHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrevBlockHash);
          }
          if (CreatedTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatedTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payload other) {
          if (other == null) {
            return;
          }
          transactions_.Add(other.transactions_);
          if (other.TxNumber != 0) {
            TxNumber = other.TxNumber;
          }
          if (other.Height != 0UL) {
            Height = other.Height;
          }
          if (other.PrevBlockHash.Length != 0) {
            PrevBlockHash = other.PrevBlockHash;
          }
          if (other.CreatedTime != 0UL) {
            CreatedTime = other.CreatedTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
                break;
              }
              case 16: {
                TxNumber = input.ReadUInt32();
                break;
              }
              case 24: {
                Height = input.ReadUInt64();
                break;
              }
              case 42: {
                PrevBlockHash = input.ReadBytes();
                break;
              }
              case 48: {
                CreatedTime = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
