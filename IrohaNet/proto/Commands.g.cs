// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iroha.Protocol {

  /// <summary>Holder for reflection information generated from commands.proto</summary>
  public static partial class CommandsReflection {

    #region Descriptor
    /// <summary>File descriptor for commands.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jb21tYW5kcy5wcm90bxIOaXJvaGEucHJvdG9jb2waD3ByaW1pdGl2ZS5w",
            "cm90byJgChBBZGRBc3NldFF1YW50aXR5EhIKCmFjY291bnRfaWQYASABKAkS",
            "EAoIYXNzZXRfaWQYAiABKAkSJgoGYW1vdW50GAMgASgLMhYuaXJvaGEucHJv",
            "dG9jb2wuQW1vdW50IiwKB0FkZFBlZXISDwoHYWRkcmVzcxgBIAEoCRIQCghw",
            "ZWVyX2tleRgCIAEoDCI2CgxBZGRTaWduYXRvcnkSEgoKYWNjb3VudF9pZBgB",
            "IAEoCRISCgpwdWJsaWNfa2V5GAIgASgMIkcKC0NyZWF0ZUFzc2V0EhIKCmFz",
            "c2V0X25hbWUYASABKAkSEQoJZG9tYWluX2lkGAIgASgJEhEKCXByZWNpc2lv",
            "bhgDIAEoDSJNCg1DcmVhdGVBY2NvdW50EhQKDGFjY291bnRfbmFtZRgBIAEo",
            "CRIRCglkb21haW5faWQYAiABKAkSEwoLbWFpbl9wdWJrZXkYAyABKAwiQgoQ",
            "U2V0QWNjb3VudERldGFpbBISCgphY2NvdW50X2lkGAEgASgJEgsKA2tleRgC",
            "IAEoCRINCgV2YWx1ZRgDIAEoCSI3CgxDcmVhdGVEb21haW4SEQoJZG9tYWlu",
            "X2lkGAEgASgJEhQKDGRlZmF1bHRfcm9sZRgCIAEoCSI5Cg9SZW1vdmVTaWdu",
            "YXRvcnkSEgoKYWNjb3VudF9pZBgBIAEoCRISCgpwdWJsaWNfa2V5GAIgASgM",
            "IjYKEFNldEFjY291bnRRdW9ydW0SEgoKYWNjb3VudF9pZBgBIAEoCRIOCgZx",
            "dW9ydW0YAiABKA0ijwEKDVRyYW5zZmVyQXNzZXQSFgoOc3JjX2FjY291bnRf",
            "aWQYASABKAkSFwoPZGVzdF9hY2NvdW50X2lkGAIgASgJEhAKCGFzc2V0X2lk",
            "GAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJEiYKBmFtb3VudBgFIAEoCzIW",
            "Lmlyb2hhLnByb3RvY29sLkFtb3VudCIzCgpBcHBlbmRSb2xlEhIKCmFjY291",
            "bnRfaWQYASABKAkSEQoJcm9sZV9uYW1lGAIgASgJIjMKCkRldGFjaFJvbGUS",
            "EgoKYWNjb3VudF9pZBgBIAEoCRIRCglyb2xlX25hbWUYAiABKAkiVAoKQ3Jl",
            "YXRlUm9sZRIRCglyb2xlX25hbWUYASABKAkSMwoLcGVybWlzc2lvbnMYAiAD",
            "KA4yHi5pcm9oYS5wcm90b2NvbC5Sb2xlUGVybWlzc2lvbiJeCg9HcmFudFBl",
            "cm1pc3Npb24SEgoKYWNjb3VudF9pZBgBIAEoCRI3CgpwZXJtaXNzaW9uGAIg",
            "ASgOMiMuaXJvaGEucHJvdG9jb2wuR3JhbnRhYmxlUGVybWlzc2lvbiJfChBS",
            "ZXZva2VQZXJtaXNzaW9uEhIKCmFjY291bnRfaWQYASABKAkSNwoKcGVybWlz",
            "c2lvbhgCIAEoDjIjLmlyb2hhLnByb3RvY29sLkdyYW50YWJsZVBlcm1pc3Np",
            "b24iZQoVU3VidHJhY3RBc3NldFF1YW50aXR5EhIKCmFjY291bnRfaWQYASAB",
            "KAkSEAoIYXNzZXRfaWQYAiABKAkSJgoGYW1vdW50GAMgASgLMhYuaXJvaGEu",
            "cHJvdG9jb2wuQW1vdW50IqUHCgdDb21tYW5kEj4KEmFkZF9hc3NldF9xdWFu",
            "dGl0eRgBIAEoCzIgLmlyb2hhLnByb3RvY29sLkFkZEFzc2V0UXVhbnRpdHlI",
            "ABIrCghhZGRfcGVlchgCIAEoCzIXLmlyb2hhLnByb3RvY29sLkFkZFBlZXJI",
            "ABI1Cg1hZGRfc2lnbmF0b3J5GAMgASgLMhwuaXJvaGEucHJvdG9jb2wuQWRk",
            "U2lnbmF0b3J5SAASMQoLYXBwZW5kX3JvbGUYBCABKAsyGi5pcm9oYS5wcm90",
            "b2NvbC5BcHBlbmRSb2xlSAASNwoOY3JlYXRlX2FjY291bnQYBSABKAsyHS5p",
            "cm9oYS5wcm90b2NvbC5DcmVhdGVBY2NvdW50SAASMwoMY3JlYXRlX2Fzc2V0",
            "GAYgASgLMhsuaXJvaGEucHJvdG9jb2wuQ3JlYXRlQXNzZXRIABI1Cg1jcmVh",
            "dGVfZG9tYWluGAcgASgLMhwuaXJvaGEucHJvdG9jb2wuQ3JlYXRlRG9tYWlu",
            "SAASMQoLY3JlYXRlX3JvbGUYCCABKAsyGi5pcm9oYS5wcm90b2NvbC5DcmVh",
            "dGVSb2xlSAASMQoLZGV0YWNoX3JvbGUYCSABKAsyGi5pcm9oYS5wcm90b2Nv",
            "bC5EZXRhY2hSb2xlSAASOwoQZ3JhbnRfcGVybWlzc2lvbhgKIAEoCzIfLmly",
            "b2hhLnByb3RvY29sLkdyYW50UGVybWlzc2lvbkgAEjYKC3JlbW92ZV9zaWdu",
            "GAsgASgLMh8uaXJvaGEucHJvdG9jb2wuUmVtb3ZlU2lnbmF0b3J5SAASPQoR",
            "cmV2b2tlX3Blcm1pc3Npb24YDCABKAsyIC5pcm9oYS5wcm90b2NvbC5SZXZv",
            "a2VQZXJtaXNzaW9uSAASPgoSc2V0X2FjY291bnRfZGV0YWlsGA0gASgLMiAu",
            "aXJvaGEucHJvdG9jb2wuU2V0QWNjb3VudERldGFpbEgAEjYKCnNldF9xdW9y",
            "dW0YDiABKAsyIC5pcm9oYS5wcm90b2NvbC5TZXRBY2NvdW50UXVvcnVtSAAS",
            "SAoXc3VidHJhY3RfYXNzZXRfcXVhbnRpdHkYDyABKAsyJS5pcm9oYS5wcm90",
            "b2NvbC5TdWJ0cmFjdEFzc2V0UXVhbnRpdHlIABI3Cg50cmFuc2Zlcl9hc3Nl",
            "dBgQIAEoCzIdLmlyb2hhLnByb3RvY29sLlRyYW5zZmVyQXNzZXRIAEIJCgdj",
            "b21tYW5kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Iroha.Protocol.PrimitiveReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.AddAssetQuantity), global::Iroha.Protocol.AddAssetQuantity.Parser, new[]{ "AccountId", "AssetId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.AddPeer), global::Iroha.Protocol.AddPeer.Parser, new[]{ "Address", "PeerKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.AddSignatory), global::Iroha.Protocol.AddSignatory.Parser, new[]{ "AccountId", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.CreateAsset), global::Iroha.Protocol.CreateAsset.Parser, new[]{ "AssetName", "DomainId", "Precision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.CreateAccount), global::Iroha.Protocol.CreateAccount.Parser, new[]{ "AccountName", "DomainId", "MainPubkey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.SetAccountDetail), global::Iroha.Protocol.SetAccountDetail.Parser, new[]{ "AccountId", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.CreateDomain), global::Iroha.Protocol.CreateDomain.Parser, new[]{ "DomainId", "DefaultRole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.RemoveSignatory), global::Iroha.Protocol.RemoveSignatory.Parser, new[]{ "AccountId", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.SetAccountQuorum), global::Iroha.Protocol.SetAccountQuorum.Parser, new[]{ "AccountId", "Quorum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.TransferAsset), global::Iroha.Protocol.TransferAsset.Parser, new[]{ "SrcAccountId", "DestAccountId", "AssetId", "Description", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.AppendRole), global::Iroha.Protocol.AppendRole.Parser, new[]{ "AccountId", "RoleName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.DetachRole), global::Iroha.Protocol.DetachRole.Parser, new[]{ "AccountId", "RoleName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.CreateRole), global::Iroha.Protocol.CreateRole.Parser, new[]{ "RoleName", "Permissions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GrantPermission), global::Iroha.Protocol.GrantPermission.Parser, new[]{ "AccountId", "Permission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.RevokePermission), global::Iroha.Protocol.RevokePermission.Parser, new[]{ "AccountId", "Permission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.SubtractAssetQuantity), global::Iroha.Protocol.SubtractAssetQuantity.Parser, new[]{ "AccountId", "AssetId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Command), global::Iroha.Protocol.Command.Parser, new[]{ "AddAssetQuantity", "AddPeer", "AddSignatory", "AppendRole", "CreateAccount", "CreateAsset", "CreateDomain", "CreateRole", "DetachRole", "GrantPermission", "RemoveSign", "RevokePermission", "SetAccountDetail", "SetQuorum", "SubtractAssetQuantity", "TransferAsset" }, new[]{ "Command" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddAssetQuantity : pb::IMessage<AddAssetQuantity> {
    private static readonly pb::MessageParser<AddAssetQuantity> _parser = new pb::MessageParser<AddAssetQuantity>(() => new AddAssetQuantity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddAssetQuantity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAssetQuantity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAssetQuantity(AddAssetQuantity other) : this() {
      accountId_ = other.accountId_;
      assetId_ = other.assetId_;
      Amount = other.amount_ != null ? other.Amount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddAssetQuantity Clone() {
      return new AddAssetQuantity(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::Iroha.Protocol.Amount amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Amount Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddAssetQuantity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddAssetQuantity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (AssetId != other.AssetId) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddAssetQuantity other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          amount_ = new global::Iroha.Protocol.Amount();
        }
        Amount.MergeFrom(other.Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
          case 26: {
            if (amount_ == null) {
              amount_ = new global::Iroha.Protocol.Amount();
            }
            input.ReadMessage(amount_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPeer : pb::IMessage<AddPeer> {
    private static readonly pb::MessageParser<AddPeer> _parser = new pb::MessageParser<AddPeer>(() => new AddPeer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPeer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPeer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPeer(AddPeer other) : this() {
      address_ = other.address_;
      peerKey_ = other.peerKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPeer Clone() {
      return new AddPeer(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peer_key" field.</summary>
    public const int PeerKeyFieldNumber = 2;
    private pb::ByteString peerKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PeerKey {
      get { return peerKey_; }
      set {
        peerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPeer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPeer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (PeerKey != other.PeerKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (PeerKey.Length != 0) hash ^= PeerKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (PeerKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PeerKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (PeerKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PeerKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPeer other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.PeerKey.Length != 0) {
        PeerKey = other.PeerKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 18: {
            PeerKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddSignatory : pb::IMessage<AddSignatory> {
    private static readonly pb::MessageParser<AddSignatory> _parser = new pb::MessageParser<AddSignatory>(() => new AddSignatory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSignatory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSignatory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSignatory(AddSignatory other) : this() {
      accountId_ = other.accountId_;
      publicKey_ = other.publicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSignatory Clone() {
      return new AddSignatory(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSignatory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSignatory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (PublicKey != other.PublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSignatory other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateAsset : pb::IMessage<CreateAsset> {
    private static readonly pb::MessageParser<CreateAsset> _parser = new pb::MessageParser<CreateAsset>(() => new CreateAsset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAsset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAsset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAsset(CreateAsset other) : this() {
      assetName_ = other.assetName_;
      domainId_ = other.domainId_;
      precision_ = other.precision_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAsset Clone() {
      return new CreateAsset(this);
    }

    /// <summary>Field number for the "asset_name" field.</summary>
    public const int AssetNameFieldNumber = 1;
    private string assetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetName {
      get { return assetName_; }
      set {
        assetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain_id" field.</summary>
    public const int DomainIdFieldNumber = 2;
    private string domainId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainId {
      get { return domainId_; }
      set {
        domainId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 3;
    private uint precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAsset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAsset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetName != other.AssetName) return false;
      if (DomainId != other.DomainId) return false;
      if (Precision != other.Precision) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
      if (DomainId.Length != 0) hash ^= DomainId.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetName);
      }
      if (DomainId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DomainId);
      }
      if (Precision != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Precision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetName);
      }
      if (DomainId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainId);
      }
      if (Precision != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Precision);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAsset other) {
      if (other == null) {
        return;
      }
      if (other.AssetName.Length != 0) {
        AssetName = other.AssetName;
      }
      if (other.DomainId.Length != 0) {
        DomainId = other.DomainId;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssetName = input.ReadString();
            break;
          }
          case 18: {
            DomainId = input.ReadString();
            break;
          }
          case 24: {
            Precision = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateAccount : pb::IMessage<CreateAccount> {
    private static readonly pb::MessageParser<CreateAccount> _parser = new pb::MessageParser<CreateAccount>(() => new CreateAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccount(CreateAccount other) : this() {
      accountName_ = other.accountName_;
      domainId_ = other.domainId_;
      mainPubkey_ = other.mainPubkey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccount Clone() {
      return new CreateAccount(this);
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain_id" field.</summary>
    public const int DomainIdFieldNumber = 2;
    private string domainId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainId {
      get { return domainId_; }
      set {
        domainId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_pubkey" field.</summary>
    public const int MainPubkeyFieldNumber = 3;
    private pb::ByteString mainPubkey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MainPubkey {
      get { return mainPubkey_; }
      set {
        mainPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (DomainId != other.DomainId) return false;
      if (MainPubkey != other.MainPubkey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (DomainId.Length != 0) hash ^= DomainId.GetHashCode();
      if (MainPubkey.Length != 0) hash ^= MainPubkey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
      if (DomainId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DomainId);
      }
      if (MainPubkey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MainPubkey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (DomainId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainId);
      }
      if (MainPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MainPubkey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAccount other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.DomainId.Length != 0) {
        DomainId = other.DomainId;
      }
      if (other.MainPubkey.Length != 0) {
        MainPubkey = other.MainPubkey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
          case 18: {
            DomainId = input.ReadString();
            break;
          }
          case 26: {
            MainPubkey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAccountDetail : pb::IMessage<SetAccountDetail> {
    private static readonly pb::MessageParser<SetAccountDetail> _parser = new pb::MessageParser<SetAccountDetail>(() => new SetAccountDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAccountDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountDetail(SetAccountDetail other) : this() {
      accountId_ = other.accountId_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountDetail Clone() {
      return new SetAccountDetail(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAccountDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAccountDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAccountDetail other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateDomain : pb::IMessage<CreateDomain> {
    private static readonly pb::MessageParser<CreateDomain> _parser = new pb::MessageParser<CreateDomain>(() => new CreateDomain());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDomain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDomain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDomain(CreateDomain other) : this() {
      domainId_ = other.domainId_;
      defaultRole_ = other.defaultRole_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDomain Clone() {
      return new CreateDomain(this);
    }

    /// <summary>Field number for the "domain_id" field.</summary>
    public const int DomainIdFieldNumber = 1;
    private string domainId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainId {
      get { return domainId_; }
      set {
        domainId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_role" field.</summary>
    public const int DefaultRoleFieldNumber = 2;
    private string defaultRole_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultRole {
      get { return defaultRole_; }
      set {
        defaultRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDomain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDomain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainId != other.DomainId) return false;
      if (DefaultRole != other.DefaultRole) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DomainId.Length != 0) hash ^= DomainId.GetHashCode();
      if (DefaultRole.Length != 0) hash ^= DefaultRole.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DomainId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DomainId);
      }
      if (DefaultRole.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultRole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DomainId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainId);
      }
      if (DefaultRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultRole);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDomain other) {
      if (other == null) {
        return;
      }
      if (other.DomainId.Length != 0) {
        DomainId = other.DomainId;
      }
      if (other.DefaultRole.Length != 0) {
        DefaultRole = other.DefaultRole;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DomainId = input.ReadString();
            break;
          }
          case 18: {
            DefaultRole = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveSignatory : pb::IMessage<RemoveSignatory> {
    private static readonly pb::MessageParser<RemoveSignatory> _parser = new pb::MessageParser<RemoveSignatory>(() => new RemoveSignatory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSignatory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSignatory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSignatory(RemoveSignatory other) : this() {
      accountId_ = other.accountId_;
      publicKey_ = other.publicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSignatory Clone() {
      return new RemoveSignatory(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSignatory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSignatory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (PublicKey != other.PublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSignatory other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetAccountQuorum : pb::IMessage<SetAccountQuorum> {
    private static readonly pb::MessageParser<SetAccountQuorum> _parser = new pb::MessageParser<SetAccountQuorum>(() => new SetAccountQuorum());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAccountQuorum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountQuorum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountQuorum(SetAccountQuorum other) : this() {
      accountId_ = other.accountId_;
      quorum_ = other.quorum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAccountQuorum Clone() {
      return new SetAccountQuorum(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quorum" field.</summary>
    public const int QuorumFieldNumber = 2;
    private uint quorum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quorum {
      get { return quorum_; }
      set {
        quorum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAccountQuorum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAccountQuorum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Quorum != other.Quorum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Quorum != 0) hash ^= Quorum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Quorum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quorum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Quorum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quorum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAccountQuorum other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Quorum != 0) {
        Quorum = other.Quorum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            Quorum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferAsset : pb::IMessage<TransferAsset> {
    private static readonly pb::MessageParser<TransferAsset> _parser = new pb::MessageParser<TransferAsset>(() => new TransferAsset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferAsset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAsset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAsset(TransferAsset other) : this() {
      srcAccountId_ = other.srcAccountId_;
      destAccountId_ = other.destAccountId_;
      assetId_ = other.assetId_;
      description_ = other.description_;
      Amount = other.amount_ != null ? other.Amount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAsset Clone() {
      return new TransferAsset(this);
    }

    /// <summary>Field number for the "src_account_id" field.</summary>
    public const int SrcAccountIdFieldNumber = 1;
    private string srcAccountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcAccountId {
      get { return srcAccountId_; }
      set {
        srcAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_account_id" field.</summary>
    public const int DestAccountIdFieldNumber = 2;
    private string destAccountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestAccountId {
      get { return destAccountId_; }
      set {
        destAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private global::Iroha.Protocol.Amount amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Amount Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferAsset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferAsset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcAccountId != other.SrcAccountId) return false;
      if (DestAccountId != other.DestAccountId) return false;
      if (AssetId != other.AssetId) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcAccountId.Length != 0) hash ^= SrcAccountId.GetHashCode();
      if (DestAccountId.Length != 0) hash ^= DestAccountId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcAccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SrcAccountId);
      }
      if (DestAccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestAccountId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (amount_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcAccountId);
      }
      if (DestAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestAccountId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferAsset other) {
      if (other == null) {
        return;
      }
      if (other.SrcAccountId.Length != 0) {
        SrcAccountId = other.SrcAccountId;
      }
      if (other.DestAccountId.Length != 0) {
        DestAccountId = other.DestAccountId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          amount_ = new global::Iroha.Protocol.Amount();
        }
        Amount.MergeFrom(other.Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SrcAccountId = input.ReadString();
            break;
          }
          case 18: {
            DestAccountId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (amount_ == null) {
              amount_ = new global::Iroha.Protocol.Amount();
            }
            input.ReadMessage(amount_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppendRole : pb::IMessage<AppendRole> {
    private static readonly pb::MessageParser<AppendRole> _parser = new pb::MessageParser<AppendRole>(() => new AppendRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppendRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendRole(AppendRole other) : this() {
      accountId_ = other.accountId_;
      roleName_ = other.roleName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppendRole Clone() {
      return new AppendRole(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppendRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppendRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (RoleName != other.RoleName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppendRole other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DetachRole : pb::IMessage<DetachRole> {
    private static readonly pb::MessageParser<DetachRole> _parser = new pb::MessageParser<DetachRole>(() => new DetachRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetachRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachRole(DetachRole other) : this() {
      accountId_ = other.accountId_;
      roleName_ = other.roleName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachRole Clone() {
      return new DetachRole(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetachRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetachRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (RoleName != other.RoleName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetachRole other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateRole : pb::IMessage<CreateRole> {
    private static readonly pb::MessageParser<CreateRole> _parser = new pb::MessageParser<CreateRole>(() => new CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRole(CreateRole other) : this() {
      roleName_ = other.roleName_;
      permissions_ = other.permissions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRole Clone() {
      return new CreateRole(this);
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 1;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Iroha.Protocol.RolePermission> _repeated_permissions_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Iroha.Protocol.RolePermission) x);
    private readonly pbc::RepeatedField<global::Iroha.Protocol.RolePermission> permissions_ = new pbc::RepeatedField<global::Iroha.Protocol.RolePermission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iroha.Protocol.RolePermission> Permissions {
      get { return permissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleName != other.RoleName) return false;
      if(!permissions_.Equals(other.permissions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      hash ^= permissions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoleName);
      }
      permissions_.WriteTo(output, _repeated_permissions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRole other) {
      if (other == null) {
        return;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      permissions_.Add(other.permissions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoleName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GrantPermission : pb::IMessage<GrantPermission> {
    private static readonly pb::MessageParser<GrantPermission> _parser = new pb::MessageParser<GrantPermission>(() => new GrantPermission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrantPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantPermission(GrantPermission other) : this() {
      accountId_ = other.accountId_;
      permission_ = other.permission_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantPermission Clone() {
      return new GrantPermission(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permission" field.</summary>
    public const int PermissionFieldNumber = 2;
    private global::Iroha.Protocol.GrantablePermission permission_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.GrantablePermission Permission {
      get { return permission_; }
      set {
        permission_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrantPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrantPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Permission != other.Permission) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Permission != 0) hash ^= Permission.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Permission != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Permission);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Permission != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Permission);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrantPermission other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Permission != 0) {
        Permission = other.Permission;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            permission_ = (global::Iroha.Protocol.GrantablePermission) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevokePermission : pb::IMessage<RevokePermission> {
    private static readonly pb::MessageParser<RevokePermission> _parser = new pb::MessageParser<RevokePermission>(() => new RevokePermission());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevokePermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokePermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokePermission(RevokePermission other) : this() {
      accountId_ = other.accountId_;
      permission_ = other.permission_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokePermission Clone() {
      return new RevokePermission(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permission" field.</summary>
    public const int PermissionFieldNumber = 2;
    private global::Iroha.Protocol.GrantablePermission permission_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.GrantablePermission Permission {
      get { return permission_; }
      set {
        permission_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevokePermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevokePermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Permission != other.Permission) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Permission != 0) hash ^= Permission.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Permission != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Permission);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Permission != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Permission);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevokePermission other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Permission != 0) {
        Permission = other.Permission;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            permission_ = (global::Iroha.Protocol.GrantablePermission) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubtractAssetQuantity : pb::IMessage<SubtractAssetQuantity> {
    private static readonly pb::MessageParser<SubtractAssetQuantity> _parser = new pb::MessageParser<SubtractAssetQuantity>(() => new SubtractAssetQuantity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubtractAssetQuantity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtractAssetQuantity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtractAssetQuantity(SubtractAssetQuantity other) : this() {
      accountId_ = other.accountId_;
      assetId_ = other.assetId_;
      Amount = other.amount_ != null ? other.Amount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubtractAssetQuantity Clone() {
      return new SubtractAssetQuantity(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::Iroha.Protocol.Amount amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Amount Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubtractAssetQuantity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubtractAssetQuantity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (AssetId != other.AssetId) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubtractAssetQuantity other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          amount_ = new global::Iroha.Protocol.Amount();
        }
        Amount.MergeFrom(other.Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
          case 26: {
            if (amount_ == null) {
              amount_ = new global::Iroha.Protocol.Amount();
            }
            input.ReadMessage(amount_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.CommandsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.AddAssetQuantity:
          AddAssetQuantity = other.AddAssetQuantity.Clone();
          break;
        case CommandOneofCase.AddPeer:
          AddPeer = other.AddPeer.Clone();
          break;
        case CommandOneofCase.AddSignatory:
          AddSignatory = other.AddSignatory.Clone();
          break;
        case CommandOneofCase.AppendRole:
          AppendRole = other.AppendRole.Clone();
          break;
        case CommandOneofCase.CreateAccount:
          CreateAccount = other.CreateAccount.Clone();
          break;
        case CommandOneofCase.CreateAsset:
          CreateAsset = other.CreateAsset.Clone();
          break;
        case CommandOneofCase.CreateDomain:
          CreateDomain = other.CreateDomain.Clone();
          break;
        case CommandOneofCase.CreateRole:
          CreateRole = other.CreateRole.Clone();
          break;
        case CommandOneofCase.DetachRole:
          DetachRole = other.DetachRole.Clone();
          break;
        case CommandOneofCase.GrantPermission:
          GrantPermission = other.GrantPermission.Clone();
          break;
        case CommandOneofCase.RemoveSign:
          RemoveSign = other.RemoveSign.Clone();
          break;
        case CommandOneofCase.RevokePermission:
          RevokePermission = other.RevokePermission.Clone();
          break;
        case CommandOneofCase.SetAccountDetail:
          SetAccountDetail = other.SetAccountDetail.Clone();
          break;
        case CommandOneofCase.SetQuorum:
          SetQuorum = other.SetQuorum.Clone();
          break;
        case CommandOneofCase.SubtractAssetQuantity:
          SubtractAssetQuantity = other.SubtractAssetQuantity.Clone();
          break;
        case CommandOneofCase.TransferAsset:
          TransferAsset = other.TransferAsset.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "add_asset_quantity" field.</summary>
    public const int AddAssetQuantityFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.AddAssetQuantity AddAssetQuantity {
      get { return commandCase_ == CommandOneofCase.AddAssetQuantity ? (global::Iroha.Protocol.AddAssetQuantity) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AddAssetQuantity;
      }
    }

    /// <summary>Field number for the "add_peer" field.</summary>
    public const int AddPeerFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.AddPeer AddPeer {
      get { return commandCase_ == CommandOneofCase.AddPeer ? (global::Iroha.Protocol.AddPeer) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AddPeer;
      }
    }

    /// <summary>Field number for the "add_signatory" field.</summary>
    public const int AddSignatoryFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.AddSignatory AddSignatory {
      get { return commandCase_ == CommandOneofCase.AddSignatory ? (global::Iroha.Protocol.AddSignatory) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AddSignatory;
      }
    }

    /// <summary>Field number for the "append_role" field.</summary>
    public const int AppendRoleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.AppendRole AppendRole {
      get { return commandCase_ == CommandOneofCase.AppendRole ? (global::Iroha.Protocol.AppendRole) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AppendRole;
      }
    }

    /// <summary>Field number for the "create_account" field.</summary>
    public const int CreateAccountFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.CreateAccount CreateAccount {
      get { return commandCase_ == CommandOneofCase.CreateAccount ? (global::Iroha.Protocol.CreateAccount) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateAccount;
      }
    }

    /// <summary>Field number for the "create_asset" field.</summary>
    public const int CreateAssetFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.CreateAsset CreateAsset {
      get { return commandCase_ == CommandOneofCase.CreateAsset ? (global::Iroha.Protocol.CreateAsset) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateAsset;
      }
    }

    /// <summary>Field number for the "create_domain" field.</summary>
    public const int CreateDomainFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.CreateDomain CreateDomain {
      get { return commandCase_ == CommandOneofCase.CreateDomain ? (global::Iroha.Protocol.CreateDomain) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateDomain;
      }
    }

    /// <summary>Field number for the "create_role" field.</summary>
    public const int CreateRoleFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.CreateRole CreateRole {
      get { return commandCase_ == CommandOneofCase.CreateRole ? (global::Iroha.Protocol.CreateRole) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateRole;
      }
    }

    /// <summary>Field number for the "detach_role" field.</summary>
    public const int DetachRoleFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.DetachRole DetachRole {
      get { return commandCase_ == CommandOneofCase.DetachRole ? (global::Iroha.Protocol.DetachRole) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DetachRole;
      }
    }

    /// <summary>Field number for the "grant_permission" field.</summary>
    public const int GrantPermissionFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.GrantPermission GrantPermission {
      get { return commandCase_ == CommandOneofCase.GrantPermission ? (global::Iroha.Protocol.GrantPermission) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.GrantPermission;
      }
    }

    /// <summary>Field number for the "remove_sign" field.</summary>
    public const int RemoveSignFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.RemoveSignatory RemoveSign {
      get { return commandCase_ == CommandOneofCase.RemoveSign ? (global::Iroha.Protocol.RemoveSignatory) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RemoveSign;
      }
    }

    /// <summary>Field number for the "revoke_permission" field.</summary>
    public const int RevokePermissionFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.RevokePermission RevokePermission {
      get { return commandCase_ == CommandOneofCase.RevokePermission ? (global::Iroha.Protocol.RevokePermission) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RevokePermission;
      }
    }

    /// <summary>Field number for the "set_account_detail" field.</summary>
    public const int SetAccountDetailFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.SetAccountDetail SetAccountDetail {
      get { return commandCase_ == CommandOneofCase.SetAccountDetail ? (global::Iroha.Protocol.SetAccountDetail) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SetAccountDetail;
      }
    }

    /// <summary>Field number for the "set_quorum" field.</summary>
    public const int SetQuorumFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.SetAccountQuorum SetQuorum {
      get { return commandCase_ == CommandOneofCase.SetQuorum ? (global::Iroha.Protocol.SetAccountQuorum) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SetQuorum;
      }
    }

    /// <summary>Field number for the "subtract_asset_quantity" field.</summary>
    public const int SubtractAssetQuantityFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.SubtractAssetQuantity SubtractAssetQuantity {
      get { return commandCase_ == CommandOneofCase.SubtractAssetQuantity ? (global::Iroha.Protocol.SubtractAssetQuantity) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SubtractAssetQuantity;
      }
    }

    /// <summary>Field number for the "transfer_asset" field.</summary>
    public const int TransferAssetFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.TransferAsset TransferAsset {
      get { return commandCase_ == CommandOneofCase.TransferAsset ? (global::Iroha.Protocol.TransferAsset) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.TransferAsset;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      AddAssetQuantity = 1,
      AddPeer = 2,
      AddSignatory = 3,
      AppendRole = 4,
      CreateAccount = 5,
      CreateAsset = 6,
      CreateDomain = 7,
      CreateRole = 8,
      DetachRole = 9,
      GrantPermission = 10,
      RemoveSign = 11,
      RevokePermission = 12,
      SetAccountDetail = 13,
      SetQuorum = 14,
      SubtractAssetQuantity = 15,
      TransferAsset = 16,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AddAssetQuantity, other.AddAssetQuantity)) return false;
      if (!object.Equals(AddPeer, other.AddPeer)) return false;
      if (!object.Equals(AddSignatory, other.AddSignatory)) return false;
      if (!object.Equals(AppendRole, other.AppendRole)) return false;
      if (!object.Equals(CreateAccount, other.CreateAccount)) return false;
      if (!object.Equals(CreateAsset, other.CreateAsset)) return false;
      if (!object.Equals(CreateDomain, other.CreateDomain)) return false;
      if (!object.Equals(CreateRole, other.CreateRole)) return false;
      if (!object.Equals(DetachRole, other.DetachRole)) return false;
      if (!object.Equals(GrantPermission, other.GrantPermission)) return false;
      if (!object.Equals(RemoveSign, other.RemoveSign)) return false;
      if (!object.Equals(RevokePermission, other.RevokePermission)) return false;
      if (!object.Equals(SetAccountDetail, other.SetAccountDetail)) return false;
      if (!object.Equals(SetQuorum, other.SetQuorum)) return false;
      if (!object.Equals(SubtractAssetQuantity, other.SubtractAssetQuantity)) return false;
      if (!object.Equals(TransferAsset, other.TransferAsset)) return false;
      if (CommandCase != other.CommandCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.AddAssetQuantity) hash ^= AddAssetQuantity.GetHashCode();
      if (commandCase_ == CommandOneofCase.AddPeer) hash ^= AddPeer.GetHashCode();
      if (commandCase_ == CommandOneofCase.AddSignatory) hash ^= AddSignatory.GetHashCode();
      if (commandCase_ == CommandOneofCase.AppendRole) hash ^= AppendRole.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateAccount) hash ^= CreateAccount.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateAsset) hash ^= CreateAsset.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateDomain) hash ^= CreateDomain.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateRole) hash ^= CreateRole.GetHashCode();
      if (commandCase_ == CommandOneofCase.DetachRole) hash ^= DetachRole.GetHashCode();
      if (commandCase_ == CommandOneofCase.GrantPermission) hash ^= GrantPermission.GetHashCode();
      if (commandCase_ == CommandOneofCase.RemoveSign) hash ^= RemoveSign.GetHashCode();
      if (commandCase_ == CommandOneofCase.RevokePermission) hash ^= RevokePermission.GetHashCode();
      if (commandCase_ == CommandOneofCase.SetAccountDetail) hash ^= SetAccountDetail.GetHashCode();
      if (commandCase_ == CommandOneofCase.SetQuorum) hash ^= SetQuorum.GetHashCode();
      if (commandCase_ == CommandOneofCase.SubtractAssetQuantity) hash ^= SubtractAssetQuantity.GetHashCode();
      if (commandCase_ == CommandOneofCase.TransferAsset) hash ^= TransferAsset.GetHashCode();
      hash ^= (int) commandCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.AddAssetQuantity) {
        output.WriteRawTag(10);
        output.WriteMessage(AddAssetQuantity);
      }
      if (commandCase_ == CommandOneofCase.AddPeer) {
        output.WriteRawTag(18);
        output.WriteMessage(AddPeer);
      }
      if (commandCase_ == CommandOneofCase.AddSignatory) {
        output.WriteRawTag(26);
        output.WriteMessage(AddSignatory);
      }
      if (commandCase_ == CommandOneofCase.AppendRole) {
        output.WriteRawTag(34);
        output.WriteMessage(AppendRole);
      }
      if (commandCase_ == CommandOneofCase.CreateAccount) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateAccount);
      }
      if (commandCase_ == CommandOneofCase.CreateAsset) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateAsset);
      }
      if (commandCase_ == CommandOneofCase.CreateDomain) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateDomain);
      }
      if (commandCase_ == CommandOneofCase.CreateRole) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateRole);
      }
      if (commandCase_ == CommandOneofCase.DetachRole) {
        output.WriteRawTag(74);
        output.WriteMessage(DetachRole);
      }
      if (commandCase_ == CommandOneofCase.GrantPermission) {
        output.WriteRawTag(82);
        output.WriteMessage(GrantPermission);
      }
      if (commandCase_ == CommandOneofCase.RemoveSign) {
        output.WriteRawTag(90);
        output.WriteMessage(RemoveSign);
      }
      if (commandCase_ == CommandOneofCase.RevokePermission) {
        output.WriteRawTag(98);
        output.WriteMessage(RevokePermission);
      }
      if (commandCase_ == CommandOneofCase.SetAccountDetail) {
        output.WriteRawTag(106);
        output.WriteMessage(SetAccountDetail);
      }
      if (commandCase_ == CommandOneofCase.SetQuorum) {
        output.WriteRawTag(114);
        output.WriteMessage(SetQuorum);
      }
      if (commandCase_ == CommandOneofCase.SubtractAssetQuantity) {
        output.WriteRawTag(122);
        output.WriteMessage(SubtractAssetQuantity);
      }
      if (commandCase_ == CommandOneofCase.TransferAsset) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(TransferAsset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.AddAssetQuantity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddAssetQuantity);
      }
      if (commandCase_ == CommandOneofCase.AddPeer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddPeer);
      }
      if (commandCase_ == CommandOneofCase.AddSignatory) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddSignatory);
      }
      if (commandCase_ == CommandOneofCase.AppendRole) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppendRole);
      }
      if (commandCase_ == CommandOneofCase.CreateAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateAccount);
      }
      if (commandCase_ == CommandOneofCase.CreateAsset) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateAsset);
      }
      if (commandCase_ == CommandOneofCase.CreateDomain) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateDomain);
      }
      if (commandCase_ == CommandOneofCase.CreateRole) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRole);
      }
      if (commandCase_ == CommandOneofCase.DetachRole) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetachRole);
      }
      if (commandCase_ == CommandOneofCase.GrantPermission) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrantPermission);
      }
      if (commandCase_ == CommandOneofCase.RemoveSign) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveSign);
      }
      if (commandCase_ == CommandOneofCase.RevokePermission) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevokePermission);
      }
      if (commandCase_ == CommandOneofCase.SetAccountDetail) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetAccountDetail);
      }
      if (commandCase_ == CommandOneofCase.SetQuorum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetQuorum);
      }
      if (commandCase_ == CommandOneofCase.SubtractAssetQuantity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubtractAssetQuantity);
      }
      if (commandCase_ == CommandOneofCase.TransferAsset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransferAsset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.AddAssetQuantity:
          if (AddAssetQuantity == null) {
            AddAssetQuantity = new global::Iroha.Protocol.AddAssetQuantity();
          }
          AddAssetQuantity.MergeFrom(other.AddAssetQuantity);
          break;
        case CommandOneofCase.AddPeer:
          if (AddPeer == null) {
            AddPeer = new global::Iroha.Protocol.AddPeer();
          }
          AddPeer.MergeFrom(other.AddPeer);
          break;
        case CommandOneofCase.AddSignatory:
          if (AddSignatory == null) {
            AddSignatory = new global::Iroha.Protocol.AddSignatory();
          }
          AddSignatory.MergeFrom(other.AddSignatory);
          break;
        case CommandOneofCase.AppendRole:
          if (AppendRole == null) {
            AppendRole = new global::Iroha.Protocol.AppendRole();
          }
          AppendRole.MergeFrom(other.AppendRole);
          break;
        case CommandOneofCase.CreateAccount:
          if (CreateAccount == null) {
            CreateAccount = new global::Iroha.Protocol.CreateAccount();
          }
          CreateAccount.MergeFrom(other.CreateAccount);
          break;
        case CommandOneofCase.CreateAsset:
          if (CreateAsset == null) {
            CreateAsset = new global::Iroha.Protocol.CreateAsset();
          }
          CreateAsset.MergeFrom(other.CreateAsset);
          break;
        case CommandOneofCase.CreateDomain:
          if (CreateDomain == null) {
            CreateDomain = new global::Iroha.Protocol.CreateDomain();
          }
          CreateDomain.MergeFrom(other.CreateDomain);
          break;
        case CommandOneofCase.CreateRole:
          if (CreateRole == null) {
            CreateRole = new global::Iroha.Protocol.CreateRole();
          }
          CreateRole.MergeFrom(other.CreateRole);
          break;
        case CommandOneofCase.DetachRole:
          if (DetachRole == null) {
            DetachRole = new global::Iroha.Protocol.DetachRole();
          }
          DetachRole.MergeFrom(other.DetachRole);
          break;
        case CommandOneofCase.GrantPermission:
          if (GrantPermission == null) {
            GrantPermission = new global::Iroha.Protocol.GrantPermission();
          }
          GrantPermission.MergeFrom(other.GrantPermission);
          break;
        case CommandOneofCase.RemoveSign:
          if (RemoveSign == null) {
            RemoveSign = new global::Iroha.Protocol.RemoveSignatory();
          }
          RemoveSign.MergeFrom(other.RemoveSign);
          break;
        case CommandOneofCase.RevokePermission:
          if (RevokePermission == null) {
            RevokePermission = new global::Iroha.Protocol.RevokePermission();
          }
          RevokePermission.MergeFrom(other.RevokePermission);
          break;
        case CommandOneofCase.SetAccountDetail:
          if (SetAccountDetail == null) {
            SetAccountDetail = new global::Iroha.Protocol.SetAccountDetail();
          }
          SetAccountDetail.MergeFrom(other.SetAccountDetail);
          break;
        case CommandOneofCase.SetQuorum:
          if (SetQuorum == null) {
            SetQuorum = new global::Iroha.Protocol.SetAccountQuorum();
          }
          SetQuorum.MergeFrom(other.SetQuorum);
          break;
        case CommandOneofCase.SubtractAssetQuantity:
          if (SubtractAssetQuantity == null) {
            SubtractAssetQuantity = new global::Iroha.Protocol.SubtractAssetQuantity();
          }
          SubtractAssetQuantity.MergeFrom(other.SubtractAssetQuantity);
          break;
        case CommandOneofCase.TransferAsset:
          if (TransferAsset == null) {
            TransferAsset = new global::Iroha.Protocol.TransferAsset();
          }
          TransferAsset.MergeFrom(other.TransferAsset);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iroha.Protocol.AddAssetQuantity subBuilder = new global::Iroha.Protocol.AddAssetQuantity();
            if (commandCase_ == CommandOneofCase.AddAssetQuantity) {
              subBuilder.MergeFrom(AddAssetQuantity);
            }
            input.ReadMessage(subBuilder);
            AddAssetQuantity = subBuilder;
            break;
          }
          case 18: {
            global::Iroha.Protocol.AddPeer subBuilder = new global::Iroha.Protocol.AddPeer();
            if (commandCase_ == CommandOneofCase.AddPeer) {
              subBuilder.MergeFrom(AddPeer);
            }
            input.ReadMessage(subBuilder);
            AddPeer = subBuilder;
            break;
          }
          case 26: {
            global::Iroha.Protocol.AddSignatory subBuilder = new global::Iroha.Protocol.AddSignatory();
            if (commandCase_ == CommandOneofCase.AddSignatory) {
              subBuilder.MergeFrom(AddSignatory);
            }
            input.ReadMessage(subBuilder);
            AddSignatory = subBuilder;
            break;
          }
          case 34: {
            global::Iroha.Protocol.AppendRole subBuilder = new global::Iroha.Protocol.AppendRole();
            if (commandCase_ == CommandOneofCase.AppendRole) {
              subBuilder.MergeFrom(AppendRole);
            }
            input.ReadMessage(subBuilder);
            AppendRole = subBuilder;
            break;
          }
          case 42: {
            global::Iroha.Protocol.CreateAccount subBuilder = new global::Iroha.Protocol.CreateAccount();
            if (commandCase_ == CommandOneofCase.CreateAccount) {
              subBuilder.MergeFrom(CreateAccount);
            }
            input.ReadMessage(subBuilder);
            CreateAccount = subBuilder;
            break;
          }
          case 50: {
            global::Iroha.Protocol.CreateAsset subBuilder = new global::Iroha.Protocol.CreateAsset();
            if (commandCase_ == CommandOneofCase.CreateAsset) {
              subBuilder.MergeFrom(CreateAsset);
            }
            input.ReadMessage(subBuilder);
            CreateAsset = subBuilder;
            break;
          }
          case 58: {
            global::Iroha.Protocol.CreateDomain subBuilder = new global::Iroha.Protocol.CreateDomain();
            if (commandCase_ == CommandOneofCase.CreateDomain) {
              subBuilder.MergeFrom(CreateDomain);
            }
            input.ReadMessage(subBuilder);
            CreateDomain = subBuilder;
            break;
          }
          case 66: {
            global::Iroha.Protocol.CreateRole subBuilder = new global::Iroha.Protocol.CreateRole();
            if (commandCase_ == CommandOneofCase.CreateRole) {
              subBuilder.MergeFrom(CreateRole);
            }
            input.ReadMessage(subBuilder);
            CreateRole = subBuilder;
            break;
          }
          case 74: {
            global::Iroha.Protocol.DetachRole subBuilder = new global::Iroha.Protocol.DetachRole();
            if (commandCase_ == CommandOneofCase.DetachRole) {
              subBuilder.MergeFrom(DetachRole);
            }
            input.ReadMessage(subBuilder);
            DetachRole = subBuilder;
            break;
          }
          case 82: {
            global::Iroha.Protocol.GrantPermission subBuilder = new global::Iroha.Protocol.GrantPermission();
            if (commandCase_ == CommandOneofCase.GrantPermission) {
              subBuilder.MergeFrom(GrantPermission);
            }
            input.ReadMessage(subBuilder);
            GrantPermission = subBuilder;
            break;
          }
          case 90: {
            global::Iroha.Protocol.RemoveSignatory subBuilder = new global::Iroha.Protocol.RemoveSignatory();
            if (commandCase_ == CommandOneofCase.RemoveSign) {
              subBuilder.MergeFrom(RemoveSign);
            }
            input.ReadMessage(subBuilder);
            RemoveSign = subBuilder;
            break;
          }
          case 98: {
            global::Iroha.Protocol.RevokePermission subBuilder = new global::Iroha.Protocol.RevokePermission();
            if (commandCase_ == CommandOneofCase.RevokePermission) {
              subBuilder.MergeFrom(RevokePermission);
            }
            input.ReadMessage(subBuilder);
            RevokePermission = subBuilder;
            break;
          }
          case 106: {
            global::Iroha.Protocol.SetAccountDetail subBuilder = new global::Iroha.Protocol.SetAccountDetail();
            if (commandCase_ == CommandOneofCase.SetAccountDetail) {
              subBuilder.MergeFrom(SetAccountDetail);
            }
            input.ReadMessage(subBuilder);
            SetAccountDetail = subBuilder;
            break;
          }
          case 114: {
            global::Iroha.Protocol.SetAccountQuorum subBuilder = new global::Iroha.Protocol.SetAccountQuorum();
            if (commandCase_ == CommandOneofCase.SetQuorum) {
              subBuilder.MergeFrom(SetQuorum);
            }
            input.ReadMessage(subBuilder);
            SetQuorum = subBuilder;
            break;
          }
          case 122: {
            global::Iroha.Protocol.SubtractAssetQuantity subBuilder = new global::Iroha.Protocol.SubtractAssetQuantity();
            if (commandCase_ == CommandOneofCase.SubtractAssetQuantity) {
              subBuilder.MergeFrom(SubtractAssetQuantity);
            }
            input.ReadMessage(subBuilder);
            SubtractAssetQuantity = subBuilder;
            break;
          }
          case 130: {
            global::Iroha.Protocol.TransferAsset subBuilder = new global::Iroha.Protocol.TransferAsset();
            if (commandCase_ == CommandOneofCase.TransferAsset) {
              subBuilder.MergeFrom(TransferAsset);
            }
            input.ReadMessage(subBuilder);
            TransferAsset = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
