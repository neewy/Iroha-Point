// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queries.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iroha.Protocol {

  /// <summary>Holder for reflection information generated from queries.proto</summary>
  public static partial class QueriesReflection {

    #region Descriptor
    /// <summary>File descriptor for queries.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueriesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1xdWVyaWVzLnByb3RvEg5pcm9oYS5wcm90b2NvbBoPcHJpbWl0aXZlLnBy",
            "b3RvIiAKCkdldEFjY291bnQSEgoKYWNjb3VudF9pZBgBIAEoCSIkCg5HZXRT",
            "aWduYXRvcmllcxISCgphY2NvdW50X2lkGAEgASgJIiwKFkdldEFjY291bnRU",
            "cmFuc2FjdGlvbnMSEgoKYWNjb3VudF9pZBgBIAEoCSJDChtHZXRBY2NvdW50",
            "QXNzZXRUcmFuc2FjdGlvbnMSEgoKYWNjb3VudF9pZBgBIAEoCRIQCghhc3Nl",
            "dF9pZBgCIAEoCSIkCg9HZXRUcmFuc2FjdGlvbnMSEQoJdHhfaGFzaGVzGAEg",
            "AygJIjgKEEdldEFjY291bnRBc3NldHMSEgoKYWNjb3VudF9pZBgBIAEoCRIQ",
            "Cghhc3NldF9pZBgCIAEoCSI2ChBHZXRBY2NvdW50RGV0YWlsEhIKCmFjY291",
            "bnRfaWQYASABKAkSDgoGZGV0YWlsGAIgASgJIiAKDEdldEFzc2V0SW5mbxIQ",
            "Cghhc3NldF9pZBgBIAEoCSIKCghHZXRSb2xlcyIlChJHZXRSb2xlUGVybWlz",
            "c2lvbnMSDwoHcm9sZV9pZBgBIAEoCSLEBgoFUXVlcnkSLgoHcGF5bG9hZBgB",
            "IAEoCzIdLmlyb2hhLnByb3RvY29sLlF1ZXJ5LlBheWxvYWQSLAoJc2lnbmF0",
            "dXJlGAIgASgLMhkuaXJvaGEucHJvdG9jb2wuU2lnbmF0dXJlGtwFCgdQYXls",
            "b2FkEhQKDGNyZWF0ZWRfdGltZRgBIAEoBBIaChJjcmVhdG9yX2FjY291bnRf",
            "aWQYAiABKAkSMQoLZ2V0X2FjY291bnQYAyABKAsyGi5pcm9oYS5wcm90b2Nv",
            "bC5HZXRBY2NvdW50SAASQQoXZ2V0X2FjY291bnRfc2lnbmF0b3JpZXMYBCAB",
            "KAsyHi5pcm9oYS5wcm90b2NvbC5HZXRTaWduYXRvcmllc0gAEkoKGGdldF9h",
            "Y2NvdW50X3RyYW5zYWN0aW9ucxgFIAEoCzImLmlyb2hhLnByb3RvY29sLkdl",
            "dEFjY291bnRUcmFuc2FjdGlvbnNIABJVCh5nZXRfYWNjb3VudF9hc3NldF90",
            "cmFuc2FjdGlvbnMYBiABKAsyKy5pcm9oYS5wcm90b2NvbC5HZXRBY2NvdW50",
            "QXNzZXRUcmFuc2FjdGlvbnNIABI7ChBnZXRfdHJhbnNhY3Rpb25zGAcgASgL",
            "Mh8uaXJvaGEucHJvdG9jb2wuR2V0VHJhbnNhY3Rpb25zSAASPgoSZ2V0X2Fj",
            "Y291bnRfYXNzZXRzGAggASgLMiAuaXJvaGEucHJvdG9jb2wuR2V0QWNjb3Vu",
            "dEFzc2V0c0gAEj4KEmdldF9hY2NvdW50X2RldGFpbBgJIAEoCzIgLmlyb2hh",
            "LnByb3RvY29sLkdldEFjY291bnREZXRhaWxIABItCglnZXRfcm9sZXMYCiAB",
            "KAsyGC5pcm9oYS5wcm90b2NvbC5HZXRSb2xlc0gAEkIKFGdldF9yb2xlX3Bl",
            "cm1pc3Npb25zGAsgASgLMiIuaXJvaGEucHJvdG9jb2wuR2V0Um9sZVBlcm1p",
            "c3Npb25zSAASNgoOZ2V0X2Fzc2V0X2luZm8YDCABKAsyHC5pcm9oYS5wcm90",
            "b2NvbC5HZXRBc3NldEluZm9IABIVCg1xdWVyeV9jb3VudGVyGA0gASgEQgcK",
            "BXF1ZXJ5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Iroha.Protocol.PrimitiveReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetAccount), global::Iroha.Protocol.GetAccount.Parser, new[]{ "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetSignatories), global::Iroha.Protocol.GetSignatories.Parser, new[]{ "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetAccountTransactions), global::Iroha.Protocol.GetAccountTransactions.Parser, new[]{ "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetAccountAssetTransactions), global::Iroha.Protocol.GetAccountAssetTransactions.Parser, new[]{ "AccountId", "AssetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetTransactions), global::Iroha.Protocol.GetTransactions.Parser, new[]{ "TxHashes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetAccountAssets), global::Iroha.Protocol.GetAccountAssets.Parser, new[]{ "AccountId", "AssetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetAccountDetail), global::Iroha.Protocol.GetAccountDetail.Parser, new[]{ "AccountId", "Detail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetAssetInfo), global::Iroha.Protocol.GetAssetInfo.Parser, new[]{ "AssetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetRoles), global::Iroha.Protocol.GetRoles.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.GetRolePermissions), global::Iroha.Protocol.GetRolePermissions.Parser, new[]{ "RoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Query), global::Iroha.Protocol.Query.Parser, new[]{ "Payload", "Signature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Protocol.Query.Types.Payload), global::Iroha.Protocol.Query.Types.Payload.Parser, new[]{ "CreatedTime", "CreatorAccountId", "GetAccount", "GetAccountSignatories", "GetAccountTransactions", "GetAccountAssetTransactions", "GetTransactions", "GetAccountAssets", "GetAccountDetail", "GetRoles", "GetRolePermissions", "GetAssetInfo", "QueryCounter" }, new[]{ "Query" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetAccount : pb::IMessage<GetAccount> {
    private static readonly pb::MessageParser<GetAccount> _parser = new pb::MessageParser<GetAccount>(() => new GetAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccount(GetAccount other) : this() {
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccount Clone() {
      return new GetAccount(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccount other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSignatories : pb::IMessage<GetSignatories> {
    private static readonly pb::MessageParser<GetSignatories> _parser = new pb::MessageParser<GetSignatories>(() => new GetSignatories());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSignatories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatories(GetSignatories other) : this() {
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatories Clone() {
      return new GetSignatories(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSignatories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSignatories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSignatories other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAccountTransactions : pb::IMessage<GetAccountTransactions> {
    private static readonly pb::MessageParser<GetAccountTransactions> _parser = new pb::MessageParser<GetAccountTransactions>(() => new GetAccountTransactions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountTransactions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactions(GetAccountTransactions other) : this() {
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountTransactions Clone() {
      return new GetAccountTransactions(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountTransactions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountTransactions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountTransactions other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAccountAssetTransactions : pb::IMessage<GetAccountAssetTransactions> {
    private static readonly pb::MessageParser<GetAccountAssetTransactions> _parser = new pb::MessageParser<GetAccountAssetTransactions>(() => new GetAccountAssetTransactions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountAssetTransactions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountAssetTransactions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountAssetTransactions(GetAccountAssetTransactions other) : this() {
      accountId_ = other.accountId_;
      assetId_ = other.assetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountAssetTransactions Clone() {
      return new GetAccountAssetTransactions(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountAssetTransactions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountAssetTransactions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (AssetId != other.AssetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountAssetTransactions other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactions : pb::IMessage<GetTransactions> {
    private static readonly pb::MessageParser<GetTransactions> _parser = new pb::MessageParser<GetTransactions>(() => new GetTransactions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactions(GetTransactions other) : this() {
      txHashes_ = other.txHashes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactions Clone() {
      return new GetTransactions(this);
    }

    /// <summary>Field number for the "tx_hashes" field.</summary>
    public const int TxHashesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_txHashes_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> txHashes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TxHashes {
      get { return txHashes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!txHashes_.Equals(other.txHashes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= txHashes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      txHashes_.WriteTo(output, _repeated_txHashes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += txHashes_.CalculateSize(_repeated_txHashes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactions other) {
      if (other == null) {
        return;
      }
      txHashes_.Add(other.txHashes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            txHashes_.AddEntriesFrom(input, _repeated_txHashes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAccountAssets : pb::IMessage<GetAccountAssets> {
    private static readonly pb::MessageParser<GetAccountAssets> _parser = new pb::MessageParser<GetAccountAssets>(() => new GetAccountAssets());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountAssets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountAssets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountAssets(GetAccountAssets other) : this() {
      accountId_ = other.accountId_;
      assetId_ = other.assetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountAssets Clone() {
      return new GetAccountAssets(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountAssets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountAssets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (AssetId != other.AssetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountAssets other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAccountDetail : pb::IMessage<GetAccountDetail> {
    private static readonly pb::MessageParser<GetAccountDetail> _parser = new pb::MessageParser<GetAccountDetail>(() => new GetAccountDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountDetail(GetAccountDetail other) : this() {
      accountId_ = other.accountId_;
      detail_ = other.detail_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountDetail Clone() {
      return new GetAccountDetail(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountDetail other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAssetInfo : pb::IMessage<GetAssetInfo> {
    private static readonly pb::MessageParser<GetAssetInfo> _parser = new pb::MessageParser<GetAssetInfo>(() => new GetAssetInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAssetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetInfo(GetAssetInfo other) : this() {
      assetId_ = other.assetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAssetInfo Clone() {
      return new GetAssetInfo(this);
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 1;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAssetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAssetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetId != other.AssetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAssetInfo other) {
      if (other == null) {
        return;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoles : pb::IMessage<GetRoles> {
    private static readonly pb::MessageParser<GetRoles> _parser = new pb::MessageParser<GetRoles>(() => new GetRoles());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoles(GetRoles other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoles Clone() {
      return new GetRoles(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoles other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetRolePermissions : pb::IMessage<GetRolePermissions> {
    private static readonly pb::MessageParser<GetRolePermissions> _parser = new pb::MessageParser<GetRolePermissions>(() => new GetRolePermissions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRolePermissions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRolePermissions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRolePermissions(GetRolePermissions other) : this() {
      roleId_ = other.roleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRolePermissions Clone() {
      return new GetRolePermissions(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private string roleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleId {
      get { return roleId_; }
      set {
        roleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRolePermissions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRolePermissions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId.Length != 0) hash ^= RoleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRolePermissions other) {
      if (other == null) {
        return;
      }
      if (other.RoleId.Length != 0) {
        RoleId = other.RoleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Query : pb::IMessage<Query> {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Protocol.QueriesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      Signature = other.signature_ != null ? other.Signature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Iroha.Protocol.Query.Types.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Query.Types.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private global::Iroha.Protocol.Signature signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Protocol.Signature Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (signature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Iroha.Protocol.Query.Types.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::Iroha.Protocol.Signature();
        }
        Signature.MergeFrom(other.Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Iroha.Protocol.Query.Types.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 18: {
            if (signature_ == null) {
              signature_ = new global::Iroha.Protocol.Signature();
            }
            input.ReadMessage(signature_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Query message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Payload : pb::IMessage<Payload> {
        private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Payload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Iroha.Protocol.Query.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload(Payload other) : this() {
          createdTime_ = other.createdTime_;
          creatorAccountId_ = other.creatorAccountId_;
          queryCounter_ = other.queryCounter_;
          switch (other.QueryCase) {
            case QueryOneofCase.GetAccount:
              GetAccount = other.GetAccount.Clone();
              break;
            case QueryOneofCase.GetAccountSignatories:
              GetAccountSignatories = other.GetAccountSignatories.Clone();
              break;
            case QueryOneofCase.GetAccountTransactions:
              GetAccountTransactions = other.GetAccountTransactions.Clone();
              break;
            case QueryOneofCase.GetAccountAssetTransactions:
              GetAccountAssetTransactions = other.GetAccountAssetTransactions.Clone();
              break;
            case QueryOneofCase.GetTransactions:
              GetTransactions = other.GetTransactions.Clone();
              break;
            case QueryOneofCase.GetAccountAssets:
              GetAccountAssets = other.GetAccountAssets.Clone();
              break;
            case QueryOneofCase.GetAccountDetail:
              GetAccountDetail = other.GetAccountDetail.Clone();
              break;
            case QueryOneofCase.GetRoles:
              GetRoles = other.GetRoles.Clone();
              break;
            case QueryOneofCase.GetRolePermissions:
              GetRolePermissions = other.GetRolePermissions.Clone();
              break;
            case QueryOneofCase.GetAssetInfo:
              GetAssetInfo = other.GetAssetInfo.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Payload Clone() {
          return new Payload(this);
        }

        /// <summary>Field number for the "created_time" field.</summary>
        public const int CreatedTimeFieldNumber = 1;
        private ulong createdTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CreatedTime {
          get { return createdTime_; }
          set {
            createdTime_ = value;
          }
        }

        /// <summary>Field number for the "creator_account_id" field.</summary>
        public const int CreatorAccountIdFieldNumber = 2;
        private string creatorAccountId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CreatorAccountId {
          get { return creatorAccountId_; }
          set {
            creatorAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "get_account" field.</summary>
        public const int GetAccountFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetAccount GetAccount {
          get { return queryCase_ == QueryOneofCase.GetAccount ? (global::Iroha.Protocol.GetAccount) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAccount;
          }
        }

        /// <summary>Field number for the "get_account_signatories" field.</summary>
        public const int GetAccountSignatoriesFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetSignatories GetAccountSignatories {
          get { return queryCase_ == QueryOneofCase.GetAccountSignatories ? (global::Iroha.Protocol.GetSignatories) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAccountSignatories;
          }
        }

        /// <summary>Field number for the "get_account_transactions" field.</summary>
        public const int GetAccountTransactionsFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetAccountTransactions GetAccountTransactions {
          get { return queryCase_ == QueryOneofCase.GetAccountTransactions ? (global::Iroha.Protocol.GetAccountTransactions) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAccountTransactions;
          }
        }

        /// <summary>Field number for the "get_account_asset_transactions" field.</summary>
        public const int GetAccountAssetTransactionsFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetAccountAssetTransactions GetAccountAssetTransactions {
          get { return queryCase_ == QueryOneofCase.GetAccountAssetTransactions ? (global::Iroha.Protocol.GetAccountAssetTransactions) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAccountAssetTransactions;
          }
        }

        /// <summary>Field number for the "get_transactions" field.</summary>
        public const int GetTransactionsFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetTransactions GetTransactions {
          get { return queryCase_ == QueryOneofCase.GetTransactions ? (global::Iroha.Protocol.GetTransactions) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetTransactions;
          }
        }

        /// <summary>Field number for the "get_account_assets" field.</summary>
        public const int GetAccountAssetsFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetAccountAssets GetAccountAssets {
          get { return queryCase_ == QueryOneofCase.GetAccountAssets ? (global::Iroha.Protocol.GetAccountAssets) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAccountAssets;
          }
        }

        /// <summary>Field number for the "get_account_detail" field.</summary>
        public const int GetAccountDetailFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetAccountDetail GetAccountDetail {
          get { return queryCase_ == QueryOneofCase.GetAccountDetail ? (global::Iroha.Protocol.GetAccountDetail) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAccountDetail;
          }
        }

        /// <summary>Field number for the "get_roles" field.</summary>
        public const int GetRolesFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetRoles GetRoles {
          get { return queryCase_ == QueryOneofCase.GetRoles ? (global::Iroha.Protocol.GetRoles) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetRoles;
          }
        }

        /// <summary>Field number for the "get_role_permissions" field.</summary>
        public const int GetRolePermissionsFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetRolePermissions GetRolePermissions {
          get { return queryCase_ == QueryOneofCase.GetRolePermissions ? (global::Iroha.Protocol.GetRolePermissions) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetRolePermissions;
          }
        }

        /// <summary>Field number for the "get_asset_info" field.</summary>
        public const int GetAssetInfoFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Iroha.Protocol.GetAssetInfo GetAssetInfo {
          get { return queryCase_ == QueryOneofCase.GetAssetInfo ? (global::Iroha.Protocol.GetAssetInfo) query_ : null; }
          set {
            query_ = value;
            queryCase_ = value == null ? QueryOneofCase.None : QueryOneofCase.GetAssetInfo;
          }
        }

        /// <summary>Field number for the "query_counter" field.</summary>
        public const int QueryCounterFieldNumber = 13;
        private ulong queryCounter_;
        /// <summary>
        /// used to prevent replay attacks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong QueryCounter {
          get { return queryCounter_; }
          set {
            queryCounter_ = value;
          }
        }

        private object query_;
        /// <summary>Enum of possible cases for the "query" oneof.</summary>
        public enum QueryOneofCase {
          None = 0,
          GetAccount = 3,
          GetAccountSignatories = 4,
          GetAccountTransactions = 5,
          GetAccountAssetTransactions = 6,
          GetTransactions = 7,
          GetAccountAssets = 8,
          GetAccountDetail = 9,
          GetRoles = 10,
          GetRolePermissions = 11,
          GetAssetInfo = 12,
        }
        private QueryOneofCase queryCase_ = QueryOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QueryOneofCase QueryCase {
          get { return queryCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearQuery() {
          queryCase_ = QueryOneofCase.None;
          query_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Payload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Payload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CreatedTime != other.CreatedTime) return false;
          if (CreatorAccountId != other.CreatorAccountId) return false;
          if (!object.Equals(GetAccount, other.GetAccount)) return false;
          if (!object.Equals(GetAccountSignatories, other.GetAccountSignatories)) return false;
          if (!object.Equals(GetAccountTransactions, other.GetAccountTransactions)) return false;
          if (!object.Equals(GetAccountAssetTransactions, other.GetAccountAssetTransactions)) return false;
          if (!object.Equals(GetTransactions, other.GetTransactions)) return false;
          if (!object.Equals(GetAccountAssets, other.GetAccountAssets)) return false;
          if (!object.Equals(GetAccountDetail, other.GetAccountDetail)) return false;
          if (!object.Equals(GetRoles, other.GetRoles)) return false;
          if (!object.Equals(GetRolePermissions, other.GetRolePermissions)) return false;
          if (!object.Equals(GetAssetInfo, other.GetAssetInfo)) return false;
          if (QueryCounter != other.QueryCounter) return false;
          if (QueryCase != other.QueryCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CreatedTime != 0UL) hash ^= CreatedTime.GetHashCode();
          if (CreatorAccountId.Length != 0) hash ^= CreatorAccountId.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAccount) hash ^= GetAccount.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAccountSignatories) hash ^= GetAccountSignatories.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAccountTransactions) hash ^= GetAccountTransactions.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAccountAssetTransactions) hash ^= GetAccountAssetTransactions.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetTransactions) hash ^= GetTransactions.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAccountAssets) hash ^= GetAccountAssets.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAccountDetail) hash ^= GetAccountDetail.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetRoles) hash ^= GetRoles.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetRolePermissions) hash ^= GetRolePermissions.GetHashCode();
          if (queryCase_ == QueryOneofCase.GetAssetInfo) hash ^= GetAssetInfo.GetHashCode();
          if (QueryCounter != 0UL) hash ^= QueryCounter.GetHashCode();
          hash ^= (int) queryCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CreatedTime != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(CreatedTime);
          }
          if (CreatorAccountId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CreatorAccountId);
          }
          if (queryCase_ == QueryOneofCase.GetAccount) {
            output.WriteRawTag(26);
            output.WriteMessage(GetAccount);
          }
          if (queryCase_ == QueryOneofCase.GetAccountSignatories) {
            output.WriteRawTag(34);
            output.WriteMessage(GetAccountSignatories);
          }
          if (queryCase_ == QueryOneofCase.GetAccountTransactions) {
            output.WriteRawTag(42);
            output.WriteMessage(GetAccountTransactions);
          }
          if (queryCase_ == QueryOneofCase.GetAccountAssetTransactions) {
            output.WriteRawTag(50);
            output.WriteMessage(GetAccountAssetTransactions);
          }
          if (queryCase_ == QueryOneofCase.GetTransactions) {
            output.WriteRawTag(58);
            output.WriteMessage(GetTransactions);
          }
          if (queryCase_ == QueryOneofCase.GetAccountAssets) {
            output.WriteRawTag(66);
            output.WriteMessage(GetAccountAssets);
          }
          if (queryCase_ == QueryOneofCase.GetAccountDetail) {
            output.WriteRawTag(74);
            output.WriteMessage(GetAccountDetail);
          }
          if (queryCase_ == QueryOneofCase.GetRoles) {
            output.WriteRawTag(82);
            output.WriteMessage(GetRoles);
          }
          if (queryCase_ == QueryOneofCase.GetRolePermissions) {
            output.WriteRawTag(90);
            output.WriteMessage(GetRolePermissions);
          }
          if (queryCase_ == QueryOneofCase.GetAssetInfo) {
            output.WriteRawTag(98);
            output.WriteMessage(GetAssetInfo);
          }
          if (QueryCounter != 0UL) {
            output.WriteRawTag(104);
            output.WriteUInt64(QueryCounter);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CreatedTime != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatedTime);
          }
          if (CreatorAccountId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatorAccountId);
          }
          if (queryCase_ == QueryOneofCase.GetAccount) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccount);
          }
          if (queryCase_ == QueryOneofCase.GetAccountSignatories) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountSignatories);
          }
          if (queryCase_ == QueryOneofCase.GetAccountTransactions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountTransactions);
          }
          if (queryCase_ == QueryOneofCase.GetAccountAssetTransactions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountAssetTransactions);
          }
          if (queryCase_ == QueryOneofCase.GetTransactions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTransactions);
          }
          if (queryCase_ == QueryOneofCase.GetAccountAssets) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountAssets);
          }
          if (queryCase_ == QueryOneofCase.GetAccountDetail) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAccountDetail);
          }
          if (queryCase_ == QueryOneofCase.GetRoles) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRoles);
          }
          if (queryCase_ == QueryOneofCase.GetRolePermissions) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetRolePermissions);
          }
          if (queryCase_ == QueryOneofCase.GetAssetInfo) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAssetInfo);
          }
          if (QueryCounter != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QueryCounter);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Payload other) {
          if (other == null) {
            return;
          }
          if (other.CreatedTime != 0UL) {
            CreatedTime = other.CreatedTime;
          }
          if (other.CreatorAccountId.Length != 0) {
            CreatorAccountId = other.CreatorAccountId;
          }
          if (other.QueryCounter != 0UL) {
            QueryCounter = other.QueryCounter;
          }
          switch (other.QueryCase) {
            case QueryOneofCase.GetAccount:
              if (GetAccount == null) {
                GetAccount = new global::Iroha.Protocol.GetAccount();
              }
              GetAccount.MergeFrom(other.GetAccount);
              break;
            case QueryOneofCase.GetAccountSignatories:
              if (GetAccountSignatories == null) {
                GetAccountSignatories = new global::Iroha.Protocol.GetSignatories();
              }
              GetAccountSignatories.MergeFrom(other.GetAccountSignatories);
              break;
            case QueryOneofCase.GetAccountTransactions:
              if (GetAccountTransactions == null) {
                GetAccountTransactions = new global::Iroha.Protocol.GetAccountTransactions();
              }
              GetAccountTransactions.MergeFrom(other.GetAccountTransactions);
              break;
            case QueryOneofCase.GetAccountAssetTransactions:
              if (GetAccountAssetTransactions == null) {
                GetAccountAssetTransactions = new global::Iroha.Protocol.GetAccountAssetTransactions();
              }
              GetAccountAssetTransactions.MergeFrom(other.GetAccountAssetTransactions);
              break;
            case QueryOneofCase.GetTransactions:
              if (GetTransactions == null) {
                GetTransactions = new global::Iroha.Protocol.GetTransactions();
              }
              GetTransactions.MergeFrom(other.GetTransactions);
              break;
            case QueryOneofCase.GetAccountAssets:
              if (GetAccountAssets == null) {
                GetAccountAssets = new global::Iroha.Protocol.GetAccountAssets();
              }
              GetAccountAssets.MergeFrom(other.GetAccountAssets);
              break;
            case QueryOneofCase.GetAccountDetail:
              if (GetAccountDetail == null) {
                GetAccountDetail = new global::Iroha.Protocol.GetAccountDetail();
              }
              GetAccountDetail.MergeFrom(other.GetAccountDetail);
              break;
            case QueryOneofCase.GetRoles:
              if (GetRoles == null) {
                GetRoles = new global::Iroha.Protocol.GetRoles();
              }
              GetRoles.MergeFrom(other.GetRoles);
              break;
            case QueryOneofCase.GetRolePermissions:
              if (GetRolePermissions == null) {
                GetRolePermissions = new global::Iroha.Protocol.GetRolePermissions();
              }
              GetRolePermissions.MergeFrom(other.GetRolePermissions);
              break;
            case QueryOneofCase.GetAssetInfo:
              if (GetAssetInfo == null) {
                GetAssetInfo = new global::Iroha.Protocol.GetAssetInfo();
              }
              GetAssetInfo.MergeFrom(other.GetAssetInfo);
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                CreatedTime = input.ReadUInt64();
                break;
              }
              case 18: {
                CreatorAccountId = input.ReadString();
                break;
              }
              case 26: {
                global::Iroha.Protocol.GetAccount subBuilder = new global::Iroha.Protocol.GetAccount();
                if (queryCase_ == QueryOneofCase.GetAccount) {
                  subBuilder.MergeFrom(GetAccount);
                }
                input.ReadMessage(subBuilder);
                GetAccount = subBuilder;
                break;
              }
              case 34: {
                global::Iroha.Protocol.GetSignatories subBuilder = new global::Iroha.Protocol.GetSignatories();
                if (queryCase_ == QueryOneofCase.GetAccountSignatories) {
                  subBuilder.MergeFrom(GetAccountSignatories);
                }
                input.ReadMessage(subBuilder);
                GetAccountSignatories = subBuilder;
                break;
              }
              case 42: {
                global::Iroha.Protocol.GetAccountTransactions subBuilder = new global::Iroha.Protocol.GetAccountTransactions();
                if (queryCase_ == QueryOneofCase.GetAccountTransactions) {
                  subBuilder.MergeFrom(GetAccountTransactions);
                }
                input.ReadMessage(subBuilder);
                GetAccountTransactions = subBuilder;
                break;
              }
              case 50: {
                global::Iroha.Protocol.GetAccountAssetTransactions subBuilder = new global::Iroha.Protocol.GetAccountAssetTransactions();
                if (queryCase_ == QueryOneofCase.GetAccountAssetTransactions) {
                  subBuilder.MergeFrom(GetAccountAssetTransactions);
                }
                input.ReadMessage(subBuilder);
                GetAccountAssetTransactions = subBuilder;
                break;
              }
              case 58: {
                global::Iroha.Protocol.GetTransactions subBuilder = new global::Iroha.Protocol.GetTransactions();
                if (queryCase_ == QueryOneofCase.GetTransactions) {
                  subBuilder.MergeFrom(GetTransactions);
                }
                input.ReadMessage(subBuilder);
                GetTransactions = subBuilder;
                break;
              }
              case 66: {
                global::Iroha.Protocol.GetAccountAssets subBuilder = new global::Iroha.Protocol.GetAccountAssets();
                if (queryCase_ == QueryOneofCase.GetAccountAssets) {
                  subBuilder.MergeFrom(GetAccountAssets);
                }
                input.ReadMessage(subBuilder);
                GetAccountAssets = subBuilder;
                break;
              }
              case 74: {
                global::Iroha.Protocol.GetAccountDetail subBuilder = new global::Iroha.Protocol.GetAccountDetail();
                if (queryCase_ == QueryOneofCase.GetAccountDetail) {
                  subBuilder.MergeFrom(GetAccountDetail);
                }
                input.ReadMessage(subBuilder);
                GetAccountDetail = subBuilder;
                break;
              }
              case 82: {
                global::Iroha.Protocol.GetRoles subBuilder = new global::Iroha.Protocol.GetRoles();
                if (queryCase_ == QueryOneofCase.GetRoles) {
                  subBuilder.MergeFrom(GetRoles);
                }
                input.ReadMessage(subBuilder);
                GetRoles = subBuilder;
                break;
              }
              case 90: {
                global::Iroha.Protocol.GetRolePermissions subBuilder = new global::Iroha.Protocol.GetRolePermissions();
                if (queryCase_ == QueryOneofCase.GetRolePermissions) {
                  subBuilder.MergeFrom(GetRolePermissions);
                }
                input.ReadMessage(subBuilder);
                GetRolePermissions = subBuilder;
                break;
              }
              case 98: {
                global::Iroha.Protocol.GetAssetInfo subBuilder = new global::Iroha.Protocol.GetAssetInfo();
                if (queryCase_ == QueryOneofCase.GetAssetInfo) {
                  subBuilder.MergeFrom(GetAssetInfo);
                }
                input.ReadMessage(subBuilder);
                GetAssetInfo = subBuilder;
                break;
              }
              case 104: {
                QueryCounter = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
