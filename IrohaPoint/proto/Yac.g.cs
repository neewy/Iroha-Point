// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yac.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iroha.Consensus.Yac.Proto {

  /// <summary>Holder for reflection information generated from yac.proto</summary>
  public static partial class YacReflection {

    #region Descriptor
    /// <summary>File descriptor for yac.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YacReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl5YWMucHJvdG8SGWlyb2hhLmNvbnNlbnN1cy55YWMucHJvdG8aG2dvb2ds",
            "ZS9wcm90b2J1Zi9lbXB0eS5wcm90byIuCglTaWduYXR1cmUSDgoGcHVia2V5",
            "GAEgASgMEhEKCXNpZ25hdHVyZRgCIAEoDCJmCgRIYXNoEhAKCHByb3Bvc2Fs",
            "GAEgASgMEg0KBWJsb2NrGAIgASgMEj0KD2Jsb2NrX3NpZ25hdHVyZRgDIAEo",
            "CzIkLmlyb2hhLmNvbnNlbnN1cy55YWMucHJvdG8uU2lnbmF0dXJlIm4KBFZv",
            "dGUSLQoEaGFzaBgBIAEoCzIfLmlyb2hhLmNvbnNlbnN1cy55YWMucHJvdG8u",
            "SGFzaBI3CglzaWduYXR1cmUYAiABKAsyJC5pcm9oYS5jb25zZW5zdXMueWFj",
            "LnByb3RvLlNpZ25hdHVyZSI4CgZDb21taXQSLgoFdm90ZXMYASADKAsyHy5p",
            "cm9oYS5jb25zZW5zdXMueWFjLnByb3RvLlZvdGUiOAoGUmVqZWN0Ei4KBXZv",
            "dGVzGAEgAygLMh8uaXJvaGEuY29uc2Vuc3VzLnlhYy5wcm90by5Wb3RlMtwB",
            "CgNZYWMSQwoIU2VuZFZvdGUSHy5pcm9oYS5jb25zZW5zdXMueWFjLnByb3Rv",
            "LlZvdGUaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSRwoKU2VuZENvbW1pdBIh",
            "Lmlyb2hhLmNvbnNlbnN1cy55YWMucHJvdG8uQ29tbWl0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5EkcKClNlbmRSZWplY3QSIS5pcm9oYS5jb25zZW5zdXMu",
            "eWFjLnByb3RvLlJlamVjdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Consensus.Yac.Proto.Signature), global::Iroha.Consensus.Yac.Proto.Signature.Parser, new[]{ "Pubkey", "Signature_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Consensus.Yac.Proto.Hash), global::Iroha.Consensus.Yac.Proto.Hash.Parser, new[]{ "Proposal", "Block", "BlockSignature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Consensus.Yac.Proto.Vote), global::Iroha.Consensus.Yac.Proto.Vote.Parser, new[]{ "Hash", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Consensus.Yac.Proto.Commit), global::Iroha.Consensus.Yac.Proto.Commit.Parser, new[]{ "Votes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iroha.Consensus.Yac.Proto.Reject), global::Iroha.Consensus.Yac.Proto.Reject.Parser, new[]{ "Votes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Signature : pb::IMessage<Signature> {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Consensus.Yac.Proto.YacReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
      pubkey_ = other.pubkey_;
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private pb::ByteString pubkey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int Signature_FieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature_ {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (Signature_ != other.Signature_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (Signature_.Length != 0) hash ^= Signature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Pubkey);
      }
      if (Signature_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Pubkey);
      }
      if (Signature_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.Signature_.Length != 0) {
        Signature_ = other.Signature_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Pubkey = input.ReadBytes();
            break;
          }
          case 18: {
            Signature_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hash : pb::IMessage<Hash> {
    private static readonly pb::MessageParser<Hash> _parser = new pb::MessageParser<Hash>(() => new Hash());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Consensus.Yac.Proto.YacReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash(Hash other) : this() {
      proposal_ = other.proposal_;
      block_ = other.block_;
      BlockSignature = other.blockSignature_ != null ? other.BlockSignature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hash Clone() {
      return new Hash(this);
    }

    /// <summary>Field number for the "proposal" field.</summary>
    public const int ProposalFieldNumber = 1;
    private pb::ByteString proposal_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Proposal {
      get { return proposal_; }
      set {
        proposal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private pb::ByteString block_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Block {
      get { return block_; }
      set {
        block_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_signature" field.</summary>
    public const int BlockSignatureFieldNumber = 3;
    private global::Iroha.Consensus.Yac.Proto.Signature blockSignature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Consensus.Yac.Proto.Signature BlockSignature {
      get { return blockSignature_; }
      set {
        blockSignature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Proposal != other.Proposal) return false;
      if (Block != other.Block) return false;
      if (!object.Equals(BlockSignature, other.BlockSignature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Proposal.Length != 0) hash ^= Proposal.GetHashCode();
      if (Block.Length != 0) hash ^= Block.GetHashCode();
      if (blockSignature_ != null) hash ^= BlockSignature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Proposal.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Proposal);
      }
      if (Block.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Block);
      }
      if (blockSignature_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BlockSignature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Proposal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Proposal);
      }
      if (Block.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Block);
      }
      if (blockSignature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockSignature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hash other) {
      if (other == null) {
        return;
      }
      if (other.Proposal.Length != 0) {
        Proposal = other.Proposal;
      }
      if (other.Block.Length != 0) {
        Block = other.Block;
      }
      if (other.blockSignature_ != null) {
        if (blockSignature_ == null) {
          blockSignature_ = new global::Iroha.Consensus.Yac.Proto.Signature();
        }
        BlockSignature.MergeFrom(other.BlockSignature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Proposal = input.ReadBytes();
            break;
          }
          case 18: {
            Block = input.ReadBytes();
            break;
          }
          case 26: {
            if (blockSignature_ == null) {
              blockSignature_ = new global::Iroha.Consensus.Yac.Proto.Signature();
            }
            input.ReadMessage(blockSignature_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vote : pb::IMessage<Vote> {
    private static readonly pb::MessageParser<Vote> _parser = new pb::MessageParser<Vote>(() => new Vote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Consensus.Yac.Proto.YacReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote(Vote other) : this() {
      Hash = other.hash_ != null ? other.Hash.Clone() : null;
      Signature = other.signature_ != null ? other.Signature.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote Clone() {
      return new Vote(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private global::Iroha.Consensus.Yac.Proto.Hash hash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Consensus.Yac.Proto.Hash Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private global::Iroha.Consensus.Yac.Proto.Signature signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iroha.Consensus.Yac.Proto.Signature Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hash, other.Hash)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hash_ != null) hash ^= Hash.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hash_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hash);
      }
      if (signature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hash);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vote other) {
      if (other == null) {
        return;
      }
      if (other.hash_ != null) {
        if (hash_ == null) {
          hash_ = new global::Iroha.Consensus.Yac.Proto.Hash();
        }
        Hash.MergeFrom(other.Hash);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::Iroha.Consensus.Yac.Proto.Signature();
        }
        Signature.MergeFrom(other.Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hash_ == null) {
              hash_ = new global::Iroha.Consensus.Yac.Proto.Hash();
            }
            input.ReadMessage(hash_);
            break;
          }
          case 18: {
            if (signature_ == null) {
              signature_ = new global::Iroha.Consensus.Yac.Proto.Signature();
            }
            input.ReadMessage(signature_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Commit : pb::IMessage<Commit> {
    private static readonly pb::MessageParser<Commit> _parser = new pb::MessageParser<Commit>(() => new Commit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Commit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Consensus.Yac.Proto.YacReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit(Commit other) : this() {
      votes_ = other.votes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit Clone() {
      return new Commit(this);
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iroha.Consensus.Yac.Proto.Vote> _repeated_votes_codec
        = pb::FieldCodec.ForMessage(10, global::Iroha.Consensus.Yac.Proto.Vote.Parser);
    private readonly pbc::RepeatedField<global::Iroha.Consensus.Yac.Proto.Vote> votes_ = new pbc::RepeatedField<global::Iroha.Consensus.Yac.Proto.Vote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iroha.Consensus.Yac.Proto.Vote> Votes {
      get { return votes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Commit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Commit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!votes_.Equals(other.votes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= votes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      votes_.WriteTo(output, _repeated_votes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += votes_.CalculateSize(_repeated_votes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Commit other) {
      if (other == null) {
        return;
      }
      votes_.Add(other.votes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            votes_.AddEntriesFrom(input, _repeated_votes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reject : pb::IMessage<Reject> {
    private static readonly pb::MessageParser<Reject> _parser = new pb::MessageParser<Reject>(() => new Reject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iroha.Consensus.Yac.Proto.YacReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reject(Reject other) : this() {
      votes_ = other.votes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reject Clone() {
      return new Reject(this);
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iroha.Consensus.Yac.Proto.Vote> _repeated_votes_codec
        = pb::FieldCodec.ForMessage(10, global::Iroha.Consensus.Yac.Proto.Vote.Parser);
    private readonly pbc::RepeatedField<global::Iroha.Consensus.Yac.Proto.Vote> votes_ = new pbc::RepeatedField<global::Iroha.Consensus.Yac.Proto.Vote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iroha.Consensus.Yac.Proto.Vote> Votes {
      get { return votes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!votes_.Equals(other.votes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= votes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      votes_.WriteTo(output, _repeated_votes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += votes_.CalculateSize(_repeated_votes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reject other) {
      if (other == null) {
        return;
      }
      votes_.Add(other.votes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            votes_.AddEntriesFrom(input, _repeated_votes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
